--- CREATION DE LA FONCTION FplusDeCinqAns() ---
CREATE OR REPLACE FUNCTION FplusDeCinqAns()RETURNS INT AS
$$
SELECT COUNT(id_p)
FROM PERSONNE NATURAL JOIN CATEGORIE 
WHERE nom_categorie ='NON PERMANENT'and CURRENT_DATE - date_arrive > 5
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FplusDeCinqAns() ---
SELECT * FROM FplusDeCinqAns();

--- CREATION DE LA FONCTION FmaxDoctorant() ---
CREATE OR REPLACE FUNCTION FmaxDoctorant()RETURNS VARCHAR AS
$$
SELECT nom_pays
FROM PERSONNE NATURAL JOIN PAYS NATURAL JOIN GRADE
WHERE nom_grade >(SElECT MAX(nom_grade )
FROM GRADE
WHERE nom_grade LIKE '%Doctorant%')
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FmaxDoctorant() ---
SELECT * FROM FmaxDoctorant();

--- CREATION DE LA FONCTION FencoreAuLabo() ---
CREATE OR REPLACE FUNCTION FencoreAuLabo()RETURNS table(nom_p VARCHAR,prenom_p VARCHAR) AS
$$
SELECT nom_p,prenom_p
FROM PERSONNE NATURAL JOIN AFFECTATION
WHERE  fin_affectation ='01/01/0001'
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FencoreAuLabo() ---
SElECT * FROM FencoreAuLabo();

--- CREATION DE LA FONCTION FlisteStatut() ---
CREATE OR REPLACE FUNCTION FlisteStatut(IN statut_demande VARCHAR)RETURNS table(nom_p VARCHAR) AS
$$
SELECT PERSONNE.nom_p
FROM PERSONNE NATURAL JOIN GRADE
WHERE  GRADE.nom_grade  LIKE statut_demande
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FlisteStatut() ---
SELECT * FROM  FlisteStatut('Stagiaire');

--- CREATION DE LA FONCTION FtailleEquipe() ---
CREATE OR REPLACE FUNCTION FtailleEquipe(IN nom_equipe_demande VARCHAR)RETURNS INT AS 
$$
SELECT COUNT(id_p)
FROM  PERSONNE NATURAL JOIN AFFECTATION NATURAL JOIN EQUIPE 
WHERE nom_equipe LIKE nom_equipe_demande
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FtailleEquipe() ---
SELECT nom_equipe,FtailleEquipe(nom_equipe) FROM EQUIPE;

--- CREATION DE LA FONCTION FlisteDoctorants() ---
CREATE OR REPLACE FUNCTION FlisteDoctorants(IN nom_directeur_demande VARCHAR)RETURNS VARCHAR AS 
$$
SELECT nom_p
FROM PERSONNE NATURAL JOIN GRADE
WHERE nom_grade LIKE '%Doctorant%' and nom_directeur LIKE nom_directeur_demande
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FlisteDoctorants() ---
SELECT* FROM FlisteDoctorants('%Blot Denis%'); 

--7) nonPermanents

--- CREATION DE LA FONCTION FnonPermanentsEmployeurEquipe() ---
CREATE OR REPLACE FUNCTION FnonPermanentsEmployeurEquipe(IN nom_employeur_demande VARCHAR, IN nom_equipe_demande VARCHAR)RETURNS table(nom_categorie VARCHAR) AS 
$$
SELECT COUNT(nom_categorie)
FROM CATEGORIE NATURAL JOIN PERSONNE NATURAL JOIN EMPLOYEUR NATURAL JOIN AFFECTATION NATURAL JOIN EQUIPE
WHERE  nom_employeur LIKE  nom_employeur_demande and  nom_equipe LIKE nom_equipe_demande and nom_categorie LIKE '%NON PERMANENT%'
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FnonPermanentsEmployeurEquipe() ---
SELECT* FROM FnonPermanentsEmployeurEquipe('%Inria Lille%','%Loki%');

--- CREATION DE LA FONCTION FeffectifEquipe() ---
CREATE OR REPLACE FUNCTION FeffectifEquipe(IN nom_employeur_demande VARCHAR)RETURNS table(id_equipe INT,nom_equipe VARCHAR) AS 
$$
SELECT  COUNT(id_equipe),nom_equipe
FROM PERSONNE NATURAL JOIN AFFECTATION NATURAL JOIN EQUIPE NATURAL JOIN EMPLOYEUR
WHERE nom_employeur LIKE nom_employeur_demande
GROUP BY nom_equipe
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FeffectifEquipe() ---
SELECT * FROM FeffectifEquipe('%ISEN%');

--- CREATION DE LA FONCTION FlisteEmployeurs() ---
CREATE OR REPLACE FUNCTION FlisteEmployeurs(IN nom_equipe_demande VARCHAR)RETURNS table(nom_employeur VARCHAR) AS
$$
SELECT nom_employeur
FROM EMPLOYEUR NATURAL JOIN PERSONNE NATURAL JOIN AFFECTATION NATURAL JOIN EQUIPE 
WHERE nom_equipe_demande LIKE nom_equipe
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FlisteEmployeurs() ---
SELECT * FROM FlisteEmployeurs('Bonsai');

--- CREATION DE LA FONCTION FcentPour100() ---
CREATE OR REPLACE FUNCTION FcentPour100(IN nom_demande VARCHAR)RETURNS INT AS
$$
SELECT COUNT(id_p)
FROM PERSONNE NATURAL JOIN AFFECTATION NATURAL JOIN EQUIPE NATURAL JOIN SUPPORT
WHERE quotite = '100' and  nom_equipe = nom_demande
$$
LANGUAGE SQL;

--- TEST DE LA FONCTION FcentPour100() ---
SELECT * FROM FcentPour100('NOCE');

